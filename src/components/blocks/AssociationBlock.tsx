import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { unlockDigit, setCurrentBlock } from '../../store/questSlice';
import { ASSOCIATION_QUESTIONS } from '../../data/questData';
import '../../styles/AssociationBlock.css';

const AssociationBlock: React.FC = () => {
  const dispatch = useDispatch();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showInstructions, setShowInstructions] = useState(true);
  const [firstWord, setFirstWord] = useState<string[]>([]);
  const [secondWord, setSecondWord] = useState<string[]>([]);
  const [showFeedback, setShowFeedback] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);

  const currentAssociationQuestion = ASSOCIATION_QUESTIONS[currentQuestion];

  const handleLetterChange = (wordIndex: number, letterIndex: number, letter: string) => {
    const upperLetter = letter.toUpperCase();
    
    if (wordIndex === 0) {
      const newFirstWord = [...firstWord];
      newFirstWord[letterIndex] = upperLetter;
      setFirstWord(newFirstWord);
    } else {
      const newSecondWord = [...secondWord];
      newSecondWord[letterIndex] = upperLetter;
      setSecondWord(newSecondWord);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–µ
    if (letter) {
      setTimeout(() => {
        let nextInput: HTMLInputElement | null = null;
        
        if (wordIndex === 0 && letterIndex < currentAssociationQuestion.answer[0].length - 1) {
          // –°–ª–µ–¥—É—é—â–∞—è –±—É–∫–≤–∞ –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–µ
          nextInput = document.querySelector(`input[data-word="0"][data-index="${letterIndex + 1}"]`) as HTMLInputElement;
        } else if (wordIndex === 0 && letterIndex === currentAssociationQuestion.answer[0].length - 1 && currentAssociationQuestion.answer.length > 1) {
          // –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É —Å–ª–æ–≤—É
          nextInput = document.querySelector(`input[data-word="1"][data-index="0"]`) as HTMLInputElement;
        } else if (wordIndex === 1 && currentAssociationQuestion.answer.length > 1 && letterIndex < currentAssociationQuestion.answer[1].length - 1) {
          // –°–ª–µ–¥—É—é—â–∞—è –±—É–∫–≤–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª–æ–≤–µ
          nextInput = document.querySelector(`input[data-word="1"][data-index="${letterIndex + 1}"]`) as HTMLInputElement;
        }
        
        if (nextInput) {
          nextInput.focus();
        }
      }, 50);
    }
  };

  const handleSubmit = () => {
    let correct = false;
    
    if (currentAssociationQuestion.answer.length === 1) {
      // –û–¥–Ω–æ —Å–ª–æ–≤–æ
      const userWord = firstWord.join('');
      correct = userWord === currentAssociationQuestion.answer[0];
    } else {
      // –î–≤–∞ —Å–ª–æ–≤–∞
      const userFirstWord = firstWord.join('');
      const userSecondWord = secondWord.join('');
      correct = userFirstWord === currentAssociationQuestion.answer[0] && 
               userSecondWord === currentAssociationQuestion.answer[1];
    }
    
    setIsCorrect(correct);
    setShowFeedback(true);

    if (correct) {
      setTimeout(() => {
        if (currentQuestion < ASSOCIATION_QUESTIONS.length - 1) {
          setCurrentQuestion(currentQuestion + 1);
          setFirstWord([]);
          setSecondWord([]);
          setShowFeedback(false);
        } else {
          // –ë–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
          setTimeout(() => {
            dispatch(unlockDigit(3));
            dispatch(setCurrentBlock(null));
          }, 1500);
        }
      }, 2000);
    } else {
      setTimeout(() => {
        setShowFeedback(false);
        setFirstWord([]);
        setSecondWord([]);
      }, 2000);
    }
  };

  const handleBack = () => {
    dispatch(setCurrentBlock(null));
  };

  const handleStartAssociation = () => {
    setShowInstructions(false);
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–æ–ø—Ä–æ—Å–∞
  React.useEffect(() => {
    setFirstWord(new Array(currentAssociationQuestion.answer[0].length).fill(''));
    if (currentAssociationQuestion.answer.length > 1) {
      setSecondWord(new Array(currentAssociationQuestion.answer[1].length).fill(''));
    } else {
      setSecondWord([]);
    }
  }, [currentQuestion, currentAssociationQuestion.answer]);

  if (showInstructions) {
    return (
      <div className="association-block">
        <div className="block-header">
          <button className="back-button" onClick={handleBack}>‚Üê –ù–∞–∑–∞–¥</button>
          <h2>üñºÔ∏è –ë–ª–æ–∫: –ö–∞—Ä—Ç–∏–Ω–∫–∏</h2>
          <div className="progress">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</div>
        </div>

        <div className="association-content">
          <div className="instructions">
            <div className="instruction-image">
              <img src="images/bio4.jpg" alt="–ö–∞—Ä—Ç–∏–Ω–∫–∏" />
            </div>
            <div className="instruction-text">
              <h3>–ë–ª–æ–∫ "–ö–∞—Ä—Ç–∏–Ω–∫–∏"</h3>
              <p>–í —ç—Ç–æ–º –±–ª–æ–∫–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ–±—â–µ–µ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ 8 –∑–∞–¥–∞–Ω–∏—è—Ö.</p>
              <ul>
                <li>–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
                <li>–ù–∞–π–¥–∏ —Ç–æ, —á—Ç–æ –∏—Ö –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç</li>
                <li>–û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –¥–≤—É—Ö —Å–ª–æ–≤</li>
                <li>–í–≤–µ–¥–∏ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —è—á–µ–π–∫—É</li>
                <li>–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ç–≤–µ—Ä—Ç–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è (–Ω–∞–≤–µ—Ä–Ω–æ–µ) —Ü–∏—Ñ—Ä–∞ –∫–æ–¥–∞, –∏ —Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ) –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫</li>
                <li>–î–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π</li>
                <li>–Ø –¥–∞–∂–µ –Ω–µ —É–≤–µ—Ä–µ–Ω, —Ä–µ—à–∞–µ–º–æ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç</li>
              </ul>
              <button className="start-button" onClick={handleStartAssociation}>
                –ù–∞—á–∏–Ω–∞–µ–º, —Ö–æ—á—É —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –∑–∞–º–æ–∫ 
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="association-block">
      <div className="block-header">
        <button className="back-button" onClick={handleBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <h2>üñºÔ∏è –ë–ª–æ–∫: –ö–∞—Ä—Ç–∏–Ω–∫–∏</h2>
        <div className="progress">
          –ó–∞–¥–∞–Ω–∏–µ {currentQuestion + 1} –∏–∑ {ASSOCIATION_QUESTIONS.length}
        </div>
      </div>

      <div className="association-content">
        <div className="hint">
          <h3>{currentAssociationQuestion.hint}</h3>
        </div>

        <div className="images-grid">
          {currentAssociationQuestion.images.map((image, index) => (
            <div key={index} className="image-container">
              <img src={image} alt={`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`} />
            </div>
          ))}
        </div>

        <div className="answer-section">
          <h4>–í–∞—à –æ—Ç–≤–µ—Ç:</h4>
          <div className="words-container">
            <div className="word-group">
              <label>{currentAssociationQuestion.answer.length > 1 ? '–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:' : '–û—Ç–≤–µ—Ç:'}</label>
              <div className="letter-inputs">
                {firstWord.map((letter, index) => (
                  <input
                    key={`first-${index}`}
                    data-word="0"
                    data-index={index}
                    type="text"
                    value={letter}
                    onChange={(e) => handleLetterChange(0, index, e.target.value)}
                    maxLength={1}
                    className="letter-input"
                    disabled={showFeedback}
                  />
                ))}
              </div>
            </div>
            
            {currentAssociationQuestion.answer.length > 1 && (
              <div className="word-group">
                <label>–í—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ:</label>
                <div className="letter-inputs">
                  {secondWord.map((letter, index) => (
                    <input
                      key={`second-${index}`}
                      data-word="1"
                      data-index={index}
                      type="text"
                      value={letter}
                      onChange={(e) => handleLetterChange(1, index, e.target.value)}
                      maxLength={1}
                      className="letter-input"
                      disabled={showFeedback}
                    />
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {showFeedback && (
          <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>
            {isCorrect ? (
              <div>
                <span className="feedback-icon">‚úÖ</span>
                <span>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! {currentQuestion === ASSOCIATION_QUESTIONS.length - 1 ? '–ë–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!' : '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.'}</span>
              </div>
            ) : (
              <div>
                <span className="feedback-icon">‚ùå</span>
                <span>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</span>
              </div>
            )}
          </div>
        )}

        {!showFeedback && (
          <button 
            className="submit-button"
            onClick={handleSubmit}
            disabled={
              firstWord.some(letter => !letter.trim()) || 
              (currentAssociationQuestion.answer.length > 1 && secondWord.some(letter => !letter.trim()))
            }
          >
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </button>
        )}
      </div>
    </div>
  );
};

export default AssociationBlock;