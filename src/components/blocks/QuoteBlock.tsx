import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { unlockDigit, setCurrentBlock } from '../../store/questSlice';
import { QUOTE_QUESTIONS } from '../../data/questData';
import '../../styles/QuoteBlock.css';

const QuoteBlock: React.FC = () => {
  const dispatch = useDispatch();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showInstructions, setShowInstructions] = useState(true);
  const [selectedWords, setSelectedWords] = useState<string[]>([]);
  const [availableWords, setAvailableWords] = useState<string[]>([...QUOTE_QUESTIONS[0].words]);
  const [showFeedback, setShowFeedback] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);

  const currentQuoteQuestion = QUOTE_QUESTIONS[currentQuestion];

  const handleWordClick = (word: string, fromSelected: boolean) => {
    if (showFeedback) return;

    if (fromSelected) {
      // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      setSelectedWords(prev => prev.filter(w => w !== word));
      setAvailableWords(prev => [...prev, word]);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
      setSelectedWords(prev => [...prev, word]);
      setAvailableWords(prev => prev.filter(w => w !== word));
    }
  };

  const handleSubmit = () => {
    const correct = JSON.stringify(selectedWords) === JSON.stringify(currentQuoteQuestion.correct);
    setIsCorrect(correct);
    setShowFeedback(true);

    if (correct) {
      setTimeout(() => {
        if (currentQuestion < QUOTE_QUESTIONS.length - 1) {
          const nextQuestion = currentQuestion + 1;
          setCurrentQuestion(nextQuestion);
          setSelectedWords([]);
          setAvailableWords([...QUOTE_QUESTIONS[nextQuestion].words]);
          setShowFeedback(false);
        } else {
          // –ë–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
          setTimeout(() => {
            dispatch(unlockDigit(1));
            dispatch(setCurrentBlock(null));
          }, 1500);
        }
      }, 2000);
    } else {
      setTimeout(() => {
        setShowFeedback(false);
        setSelectedWords([]);
        setAvailableWords([...currentQuoteQuestion.words]);
      }, 2000);
    }
  };

  const handleBack = () => {
    dispatch(setCurrentBlock(null));
  };

  const handleStartQuote = () => {
    setShowInstructions(false);
  };

  if (showInstructions) {
    return (
      <div className="quote-block">
        <div className="block-header">
          <button className="back-button" onClick={handleBack}>‚Üê –ù–∞–∑–∞–¥</button>
          <h2>üí¨ –ë–ª–æ–∫: –¶–∏—Ç–∞—Ç—ã</h2>
          <div className="progress">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</div>
        </div>

        <div className="quote-content">
          <div className="instructions">
            <div className="instruction-image">
              <img src="images/bio2.png" alt="–¶–∏—Ç–∞—Ç—ã" />
            </div>
            <div className="instruction-text">
              <h3>–ë–ª–æ–∫ "–¶–∏—Ç–∞—Ç—ã"</h3>
              <p>–í —ç—Ç–æ–º –±–ª–æ–∫–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å 7 –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–µ—Å–µ–Ω.</p>
              <ul>
                <li>–í –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –æ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ü–∏—Ç–∞—Ç–µ –∏–¥—ë—Ç —Ä–µ—á—å</li>
                <li>–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</li>
                <li>–°–ª–æ–≤–∞ –º–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–Ω–æ–≤–æ</li>
                <li>–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ü–∏—Ç–∞—Ç–µ</li>
                <li>–ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞ –∫–æ–¥–∞</li>
              </ul>
              <button className="start-button" onClick={handleStartQuote}>
                –í—Å–µ —Ä–µ–ø–ª–∏–∫–∏ –°—Ç–∏–≤–∞ –∏ –ø–µ—Å–Ω–∏ –õ–°–ü –∑–Ω–∞—é –Ω–∞–∏–∑—É—Å—Ç—å!
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="quote-block">
      <div className="block-header">
        <button className="back-button" onClick={handleBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <h2>üí¨ –ë–ª–æ–∫: –¶–∏—Ç–∞—Ç—ã</h2>
        <div className="progress">
          –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {QUOTE_QUESTIONS.length}
        </div>
      </div>

      <div className="quote-content">
        <div className="hint">
          <h3>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</h3>
          <p>{currentQuoteQuestion.hint}</p>
        </div>

        <div className="quote-assembly">
          <h4>–°–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É:</h4>
          <div className="selected-words">
            {selectedWords.length > 0 ? (
              selectedWords.map((word, index) => (
                <button
                  key={`selected-${index}`}
                  className="word-button selected"
                  onClick={() => handleWordClick(word, true)}
                  disabled={showFeedback}
                >
                  {word}
                </button>
              ))
            ) : (
              <div className="placeholder">–í—ã–±–µ—Ä–∏  —Å–ª–æ–≤–∞ </div>
            )}
          </div>
        </div>

        <div className="available-words">
          <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:</h4>
          <div className="words-grid">
            {availableWords.map((word, index) => (
              <button
                key={`available-${index}`}
                className="word-button available"
                onClick={() => handleWordClick(word, false)}
                disabled={showFeedback}
              >
                {word}
              </button>
            ))}
          </div>
        </div>

        {showFeedback && (
          <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>
            {isCorrect ? (
              <div>
                <span className="feedback-icon">‚úÖ</span>
                <span>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! {currentQuestion === QUOTE_QUESTIONS.length - 1 ? '–ë–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!' : '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.'}</span>
              </div>
            ) : (
              <div>
                <span className="feedback-icon">‚ùå</span>
                <span>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.</span>
              </div>
            )}
          </div>
        )}

        {!showFeedback && (
          <button 
            className="submit-button"
            onClick={handleSubmit}
            disabled={selectedWords.length === 0}
          >
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </button>
        )}
      </div>
    </div>
  );
};

export default QuoteBlock;